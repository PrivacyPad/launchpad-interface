/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace PrivacyPresale {
  export type PresaleOptionsStruct = {
    tokenAddLiquidity: BigNumberish;
    tokenPresale: BigNumberish;
    hardCap: BigNumberish;
    softCap: BigNumberish;
    start: BigNumberish;
    end: BigNumberish;
  };

  export type PresaleOptionsStructOutput = [
    tokenAddLiquidity: bigint,
    tokenPresale: bigint,
    hardCap: bigint,
    softCap: bigint,
    start: bigint,
    end: bigint
  ] & {
    tokenAddLiquidity: bigint;
    tokenPresale: bigint;
    hardCap: bigint;
    softCap: bigint;
    start: bigint;
    end: bigint;
  };
}

export interface PrivacyPresaleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claimTokens"
      | "claimableTokens"
      | "claimed"
      | "contributions"
      | "finalizePreSale"
      | "owner"
      | "pool"
      | "purchase"
      | "refund"
      | "refunded"
      | "renounceOwnership"
      | "requestFinalizePresaleState"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Cancel"
      | "DecryptionFulfilled"
      | "Deposit"
      | "Finalized"
      | "OwnershipTransferred"
      | "PoolInitialized"
      | "Purchase"
      | "Refund"
      | "TokenClaim"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "claimTokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableTokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "contributions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizePreSale",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "purchase",
    values: [AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "refund", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "refunded",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestFinalizePresaleState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimableTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contributions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizePreSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "purchase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refunded", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestFinalizePresaleState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace CancelEvent {
  export type InputTuple = [creator: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [creator: string, timestamp: bigint];
  export interface OutputObject {
    creator: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DecryptionFulfilledEvent {
  export type InputTuple = [requestID: BigNumberish];
  export type OutputTuple = [requestID: bigint];
  export interface OutputObject {
    requestID: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    creator: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    creator: string,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    creator: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FinalizedEvent {
  export type InputTuple = [
    creator: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    creator: string,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    creator: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolInitializedEvent {
  export type InputTuple = [
    creator: AddressLike,
    amount: BigNumberish,
    liquidityTokens: BigNumberish,
    presaleTokens: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    creator: string,
    amount: bigint,
    liquidityTokens: bigint,
    presaleTokens: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    creator: string;
    amount: bigint;
    liquidityTokens: bigint;
    presaleTokens: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PurchaseEvent {
  export type InputTuple = [
    beneficiary: AddressLike,
    contribution: BigNumberish
  ];
  export type OutputTuple = [beneficiary: string, contribution: bigint];
  export interface OutputObject {
    beneficiary: string;
    contribution: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RefundEvent {
  export type InputTuple = [
    beneficiary: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    beneficiary: string,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    beneficiary: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenClaimEvent {
  export type InputTuple = [
    beneficiary: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    beneficiary: string,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    beneficiary: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PrivacyPresale extends BaseContract {
  connect(runner?: ContractRunner | null): PrivacyPresale;
  waitForDeployment(): Promise<this>;

  interface: PrivacyPresaleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claimTokens: TypedContractMethod<
    [beneficiary: AddressLike],
    [void],
    "nonpayable"
  >;

  claimableTokens: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  claimed: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  contributions: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  finalizePreSale: TypedContractMethod<
    [
      requestID: BigNumberish,
      ethRaised: BigNumberish,
      tokensSold: BigNumberish,
      signatures: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pool: TypedContractMethod<
    [],
    [
      [
        string,
        string,
        string,
        bigint,
        string,
        bigint,
        bigint,
        string,
        bigint,
        string,
        bigint,
        PrivacyPresale.PresaleOptionsStructOutput
      ] & {
        token: string;
        ctoken: string;
        uniswapV2Router02: string;
        tokenBalance: bigint;
        tokensSoldEncrypted: string;
        tokensSold: bigint;
        weiRaised: bigint;
        ethRaisedEncrypted: string;
        tokenPerEthWithDecimals: bigint;
        cweth: string;
        state: bigint;
        options: PrivacyPresale.PresaleOptionsStructOutput;
      }
    ],
    "view"
  >;

  purchase: TypedContractMethod<
    [
      beneficiary: AddressLike,
      encryptedAmount: BytesLike,
      inputProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  refund: TypedContractMethod<[beneficiary: AddressLike], [void], "nonpayable">;

  refunded: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  requestFinalizePresaleState: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claimTokens"
  ): TypedContractMethod<[beneficiary: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimableTokens"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "claimed"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "contributions"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "finalizePreSale"
  ): TypedContractMethod<
    [
      requestID: BigNumberish,
      ethRaised: BigNumberish,
      tokensSold: BigNumberish,
      signatures: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pool"
  ): TypedContractMethod<
    [],
    [
      [
        string,
        string,
        string,
        bigint,
        string,
        bigint,
        bigint,
        string,
        bigint,
        string,
        bigint,
        PrivacyPresale.PresaleOptionsStructOutput
      ] & {
        token: string;
        ctoken: string;
        uniswapV2Router02: string;
        tokenBalance: bigint;
        tokensSoldEncrypted: string;
        tokensSold: bigint;
        weiRaised: bigint;
        ethRaisedEncrypted: string;
        tokenPerEthWithDecimals: bigint;
        cweth: string;
        state: bigint;
        options: PrivacyPresale.PresaleOptionsStructOutput;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "purchase"
  ): TypedContractMethod<
    [
      beneficiary: AddressLike,
      encryptedAmount: BytesLike,
      inputProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "refund"
  ): TypedContractMethod<[beneficiary: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "refunded"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestFinalizePresaleState"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "Cancel"
  ): TypedContractEvent<
    CancelEvent.InputTuple,
    CancelEvent.OutputTuple,
    CancelEvent.OutputObject
  >;
  getEvent(
    key: "DecryptionFulfilled"
  ): TypedContractEvent<
    DecryptionFulfilledEvent.InputTuple,
    DecryptionFulfilledEvent.OutputTuple,
    DecryptionFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "Finalized"
  ): TypedContractEvent<
    FinalizedEvent.InputTuple,
    FinalizedEvent.OutputTuple,
    FinalizedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PoolInitialized"
  ): TypedContractEvent<
    PoolInitializedEvent.InputTuple,
    PoolInitializedEvent.OutputTuple,
    PoolInitializedEvent.OutputObject
  >;
  getEvent(
    key: "Purchase"
  ): TypedContractEvent<
    PurchaseEvent.InputTuple,
    PurchaseEvent.OutputTuple,
    PurchaseEvent.OutputObject
  >;
  getEvent(
    key: "Refund"
  ): TypedContractEvent<
    RefundEvent.InputTuple,
    RefundEvent.OutputTuple,
    RefundEvent.OutputObject
  >;
  getEvent(
    key: "TokenClaim"
  ): TypedContractEvent<
    TokenClaimEvent.InputTuple,
    TokenClaimEvent.OutputTuple,
    TokenClaimEvent.OutputObject
  >;

  filters: {
    "Cancel(address,uint256)": TypedContractEvent<
      CancelEvent.InputTuple,
      CancelEvent.OutputTuple,
      CancelEvent.OutputObject
    >;
    Cancel: TypedContractEvent<
      CancelEvent.InputTuple,
      CancelEvent.OutputTuple,
      CancelEvent.OutputObject
    >;

    "DecryptionFulfilled(uint256)": TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;
    DecryptionFulfilled: TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;

    "Deposit(address,uint256,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "Finalized(address,uint256,uint256)": TypedContractEvent<
      FinalizedEvent.InputTuple,
      FinalizedEvent.OutputTuple,
      FinalizedEvent.OutputObject
    >;
    Finalized: TypedContractEvent<
      FinalizedEvent.InputTuple,
      FinalizedEvent.OutputTuple,
      FinalizedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PoolInitialized(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      PoolInitializedEvent.InputTuple,
      PoolInitializedEvent.OutputTuple,
      PoolInitializedEvent.OutputObject
    >;
    PoolInitialized: TypedContractEvent<
      PoolInitializedEvent.InputTuple,
      PoolInitializedEvent.OutputTuple,
      PoolInitializedEvent.OutputObject
    >;

    "Purchase(address,uint256)": TypedContractEvent<
      PurchaseEvent.InputTuple,
      PurchaseEvent.OutputTuple,
      PurchaseEvent.OutputObject
    >;
    Purchase: TypedContractEvent<
      PurchaseEvent.InputTuple,
      PurchaseEvent.OutputTuple,
      PurchaseEvent.OutputObject
    >;

    "Refund(address,uint256,uint256)": TypedContractEvent<
      RefundEvent.InputTuple,
      RefundEvent.OutputTuple,
      RefundEvent.OutputObject
    >;
    Refund: TypedContractEvent<
      RefundEvent.InputTuple,
      RefundEvent.OutputTuple,
      RefundEvent.OutputObject
    >;

    "TokenClaim(address,uint256,uint256)": TypedContractEvent<
      TokenClaimEvent.InputTuple,
      TokenClaimEvent.OutputTuple,
      TokenClaimEvent.OutputObject
    >;
    TokenClaim: TypedContractEvent<
      TokenClaimEvent.InputTuple,
      TokenClaimEvent.OutputTuple,
      TokenClaimEvent.OutputObject
    >;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace PrivacyPresale {
  export type PresaleOptionsStruct = {
    tokenAddLiquidity: BigNumberish;
    tokenPresale: BigNumberish;
    liquidityPercentage: BigNumberish;
    hardCap: BigNumberish;
    softCap: BigNumberish;
    start: BigNumberish;
    end: BigNumberish;
  };

  export type PresaleOptionsStructOutput = [
    tokenAddLiquidity: bigint,
    tokenPresale: bigint,
    liquidityPercentage: bigint,
    hardCap: bigint,
    softCap: bigint,
    start: bigint,
    end: bigint
  ] & {
    tokenAddLiquidity: bigint;
    tokenPresale: bigint;
    liquidityPercentage: bigint;
    hardCap: bigint;
    softCap: bigint;
    start: bigint;
    end: bigint;
  };
}

export interface PrivacyPresaleFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allPresales"
      | "createPrivacyPresaleWithExistingToken"
      | "createPrivacyPresaleWithNewToken"
      | "cweth"
      | "getAllPresales"
      | "getPresalesByCreator"
      | "getPresalesCount"
      | "presalesByCreator"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "PrivacyPresaleCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "allPresales",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createPrivacyPresaleWithExistingToken",
    values: [AddressLike, PrivacyPresale.PresaleOptionsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createPrivacyPresaleWithNewToken",
    values: [string, string, BigNumberish, PrivacyPresale.PresaleOptionsStruct]
  ): string;
  encodeFunctionData(functionFragment: "cweth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAllPresales",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPresalesByCreator",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPresalesCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "presalesByCreator",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "allPresales",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPrivacyPresaleWithExistingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPrivacyPresaleWithNewToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cweth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllPresales",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPresalesByCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPresalesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "presalesByCreator",
    data: BytesLike
  ): Result;
}

export namespace PrivacyPresaleCreatedEvent {
  export type InputTuple = [
    creator: AddressLike,
    presale: AddressLike,
    token: AddressLike,
    ctoken: AddressLike,
    cweth: AddressLike
  ];
  export type OutputTuple = [
    creator: string,
    presale: string,
    token: string,
    ctoken: string,
    cweth: string
  ];
  export interface OutputObject {
    creator: string;
    presale: string;
    token: string;
    ctoken: string;
    cweth: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PrivacyPresaleFactory extends BaseContract {
  connect(runner?: ContractRunner | null): PrivacyPresaleFactory;
  waitForDeployment(): Promise<this>;

  interface: PrivacyPresaleFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allPresales: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  createPrivacyPresaleWithExistingToken: TypedContractMethod<
    [_token: AddressLike, _options: PrivacyPresale.PresaleOptionsStruct],
    [string],
    "nonpayable"
  >;

  createPrivacyPresaleWithNewToken: TypedContractMethod<
    [
      _name: string,
      _symbol: string,
      _totalSupply: BigNumberish,
      _options: PrivacyPresale.PresaleOptionsStruct
    ],
    [string],
    "nonpayable"
  >;

  cweth: TypedContractMethod<[], [string], "view">;

  getAllPresales: TypedContractMethod<[], [string[]], "view">;

  getPresalesByCreator: TypedContractMethod<
    [creator: AddressLike],
    [string[]],
    "view"
  >;

  getPresalesCount: TypedContractMethod<[], [bigint], "view">;

  presalesByCreator: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allPresales"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "createPrivacyPresaleWithExistingToken"
  ): TypedContractMethod<
    [_token: AddressLike, _options: PrivacyPresale.PresaleOptionsStruct],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createPrivacyPresaleWithNewToken"
  ): TypedContractMethod<
    [
      _name: string,
      _symbol: string,
      _totalSupply: BigNumberish,
      _options: PrivacyPresale.PresaleOptionsStruct
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cweth"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAllPresales"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getPresalesByCreator"
  ): TypedContractMethod<[creator: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getPresalesCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "presalesByCreator"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  getEvent(
    key: "PrivacyPresaleCreated"
  ): TypedContractEvent<
    PrivacyPresaleCreatedEvent.InputTuple,
    PrivacyPresaleCreatedEvent.OutputTuple,
    PrivacyPresaleCreatedEvent.OutputObject
  >;

  filters: {
    "PrivacyPresaleCreated(address,address,address,address,address)": TypedContractEvent<
      PrivacyPresaleCreatedEvent.InputTuple,
      PrivacyPresaleCreatedEvent.OutputTuple,
      PrivacyPresaleCreatedEvent.OutputObject
    >;
    PrivacyPresaleCreated: TypedContractEvent<
      PrivacyPresaleCreatedEvent.InputTuple,
      PrivacyPresaleCreatedEvent.OutputTuple,
      PrivacyPresaleCreatedEvent.OutputObject
    >;
  };
}

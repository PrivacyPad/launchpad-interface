/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ConfidentialWETHInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "balanceOf"
      | "confidentialTransfer(address,bytes32,bytes)"
      | "confidentialTransfer(address,bytes32)"
      | "confidentialTransferAndCall(address,bytes32,bytes)"
      | "confidentialTransferAndCall(address,bytes32,bytes,bytes)"
      | "confidentialTransferFrom(address,address,bytes32,bytes)"
      | "confidentialTransferFrom(address,address,bytes32)"
      | "confidentialTransferFromAndCall(address,address,bytes32,bytes,bytes)"
      | "confidentialTransferFromAndCall(address,address,bytes32,bytes)"
      | "decimals"
      | "deposit"
      | "discloseEncryptedAmount"
      | "finalizeDiscloseEncryptedAmount"
      | "finalizeWithdraw"
      | "isOperator"
      | "name"
      | "rate"
      | "setOperator"
      | "symbol"
      | "tokenURI"
      | "totalSupply"
      | "withdraw(address,address,bytes32,bytes)"
      | "withdraw(address,address,bytes32)"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ConfidentialTransfer"
      | "DecryptionFulfilled"
      | "EncryptedAmountDisclosed"
      | "OperatorSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "confidentialTransfer(address,bytes32,bytes)",
    values: [AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "confidentialTransfer(address,bytes32)",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "confidentialTransferAndCall(address,bytes32,bytes)",
    values: [AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "confidentialTransferAndCall(address,bytes32,bytes,bytes)",
    values: [AddressLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "confidentialTransferFrom(address,address,bytes32,bytes)",
    values: [AddressLike, AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "confidentialTransferFrom(address,address,bytes32)",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "confidentialTransferFromAndCall(address,address,bytes32,bytes,bytes)",
    values: [AddressLike, AddressLike, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "confidentialTransferFromAndCall(address,address,bytes32,bytes)",
    values: [AddressLike, AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "discloseEncryptedAmount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeDiscloseEncryptedAmount",
    values: [BigNumberish, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeWithdraw",
    values: [BigNumberish, BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isOperator",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "rate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setOperator",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "tokenURI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw(address,address,bytes32,bytes)",
    values: [AddressLike, AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw(address,address,bytes32)",
    values: [AddressLike, AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "confidentialTransfer(address,bytes32,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confidentialTransfer(address,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confidentialTransferAndCall(address,bytes32,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confidentialTransferAndCall(address,bytes32,bytes,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confidentialTransferFrom(address,address,bytes32,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confidentialTransferFrom(address,address,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confidentialTransferFromAndCall(address,address,bytes32,bytes,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confidentialTransferFromAndCall(address,address,bytes32,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "discloseEncryptedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeDiscloseEncryptedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOperator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdraw(address,address,bytes32,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdraw(address,address,bytes32)",
    data: BytesLike
  ): Result;
}

export namespace ConfidentialTransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    amount: BytesLike
  ];
  export type OutputTuple = [from: string, to: string, amount: string];
  export interface OutputObject {
    from: string;
    to: string;
    amount: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DecryptionFulfilledEvent {
  export type InputTuple = [requestID: BigNumberish];
  export type OutputTuple = [requestID: bigint];
  export interface OutputObject {
    requestID: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EncryptedAmountDisclosedEvent {
  export type InputTuple = [encryptedAmount: BytesLike, amount: BigNumberish];
  export type OutputTuple = [encryptedAmount: string, amount: bigint];
  export interface OutputObject {
    encryptedAmount: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OperatorSetEvent {
  export type InputTuple = [
    holder: AddressLike,
    operator: AddressLike,
    until: BigNumberish
  ];
  export type OutputTuple = [holder: string, operator: string, until: bigint];
  export interface OutputObject {
    holder: string;
    operator: string;
    until: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ConfidentialWETH extends BaseContract {
  connect(runner?: ContractRunner | null): ConfidentialWETH;
  waitForDeployment(): Promise<this>;

  interface: ConfidentialWETHInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  balanceOf: TypedContractMethod<[account: AddressLike], [string], "view">;

  "confidentialTransfer(address,bytes32,bytes)": TypedContractMethod<
    [to: AddressLike, encryptedAmount: BytesLike, inputProof: BytesLike],
    [string],
    "nonpayable"
  >;

  "confidentialTransfer(address,bytes32)": TypedContractMethod<
    [to: AddressLike, amount: BytesLike],
    [string],
    "nonpayable"
  >;

  "confidentialTransferAndCall(address,bytes32,bytes)": TypedContractMethod<
    [to: AddressLike, amount: BytesLike, data: BytesLike],
    [string],
    "nonpayable"
  >;

  "confidentialTransferAndCall(address,bytes32,bytes,bytes)": TypedContractMethod<
    [
      to: AddressLike,
      encryptedAmount: BytesLike,
      inputProof: BytesLike,
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  "confidentialTransferFrom(address,address,bytes32,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      encryptedAmount: BytesLike,
      inputProof: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  "confidentialTransferFrom(address,address,bytes32)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BytesLike],
    [string],
    "nonpayable"
  >;

  "confidentialTransferFromAndCall(address,address,bytes32,bytes,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      encryptedAmount: BytesLike,
      inputProof: BytesLike,
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;

  "confidentialTransferFromAndCall(address,address,bytes32,bytes)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BytesLike, data: BytesLike],
    [string],
    "nonpayable"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  deposit: TypedContractMethod<[to: AddressLike], [void], "payable">;

  discloseEncryptedAmount: TypedContractMethod<
    [encryptedAmount: BytesLike],
    [void],
    "nonpayable"
  >;

  finalizeDiscloseEncryptedAmount: TypedContractMethod<
    [requestId: BigNumberish, amount: BigNumberish, signatures: BytesLike[]],
    [void],
    "nonpayable"
  >;

  finalizeWithdraw: TypedContractMethod<
    [requestID: BigNumberish, amount: BigNumberish, signatures: BytesLike[]],
    [void],
    "nonpayable"
  >;

  isOperator: TypedContractMethod<
    [holder: AddressLike, spender: AddressLike],
    [boolean],
    "view"
  >;

  name: TypedContractMethod<[], [string], "view">;

  rate: TypedContractMethod<[], [bigint], "view">;

  setOperator: TypedContractMethod<
    [operator: AddressLike, until: BigNumberish],
    [void],
    "nonpayable"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenURI: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [string], "view">;

  "withdraw(address,address,bytes32,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      encryptedAmount: BytesLike,
      inputProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  "withdraw(address,address,bytes32)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "confidentialTransfer(address,bytes32,bytes)"
  ): TypedContractMethod<
    [to: AddressLike, encryptedAmount: BytesLike, inputProof: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "confidentialTransfer(address,bytes32)"
  ): TypedContractMethod<
    [to: AddressLike, amount: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "confidentialTransferAndCall(address,bytes32,bytes)"
  ): TypedContractMethod<
    [to: AddressLike, amount: BytesLike, data: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "confidentialTransferAndCall(address,bytes32,bytes,bytes)"
  ): TypedContractMethod<
    [
      to: AddressLike,
      encryptedAmount: BytesLike,
      inputProof: BytesLike,
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "confidentialTransferFrom(address,address,bytes32,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      encryptedAmount: BytesLike,
      inputProof: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "confidentialTransferFrom(address,address,bytes32)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "confidentialTransferFromAndCall(address,address,bytes32,bytes,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      encryptedAmount: BytesLike,
      inputProof: BytesLike,
      data: BytesLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "confidentialTransferFromAndCall(address,address,bytes32,bytes)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BytesLike, data: BytesLike],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[to: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "discloseEncryptedAmount"
  ): TypedContractMethod<[encryptedAmount: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "finalizeDiscloseEncryptedAmount"
  ): TypedContractMethod<
    [requestId: BigNumberish, amount: BigNumberish, signatures: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "finalizeWithdraw"
  ): TypedContractMethod<
    [requestID: BigNumberish, amount: BigNumberish, signatures: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isOperator"
  ): TypedContractMethod<
    [holder: AddressLike, spender: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setOperator"
  ): TypedContractMethod<
    [operator: AddressLike, until: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdraw(address,address,bytes32,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      encryptedAmount: BytesLike,
      inputProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw(address,address,bytes32)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BytesLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ConfidentialTransfer"
  ): TypedContractEvent<
    ConfidentialTransferEvent.InputTuple,
    ConfidentialTransferEvent.OutputTuple,
    ConfidentialTransferEvent.OutputObject
  >;
  getEvent(
    key: "DecryptionFulfilled"
  ): TypedContractEvent<
    DecryptionFulfilledEvent.InputTuple,
    DecryptionFulfilledEvent.OutputTuple,
    DecryptionFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "EncryptedAmountDisclosed"
  ): TypedContractEvent<
    EncryptedAmountDisclosedEvent.InputTuple,
    EncryptedAmountDisclosedEvent.OutputTuple,
    EncryptedAmountDisclosedEvent.OutputObject
  >;
  getEvent(
    key: "OperatorSet"
  ): TypedContractEvent<
    OperatorSetEvent.InputTuple,
    OperatorSetEvent.OutputTuple,
    OperatorSetEvent.OutputObject
  >;

  filters: {
    "ConfidentialTransfer(address,address,bytes32)": TypedContractEvent<
      ConfidentialTransferEvent.InputTuple,
      ConfidentialTransferEvent.OutputTuple,
      ConfidentialTransferEvent.OutputObject
    >;
    ConfidentialTransfer: TypedContractEvent<
      ConfidentialTransferEvent.InputTuple,
      ConfidentialTransferEvent.OutputTuple,
      ConfidentialTransferEvent.OutputObject
    >;

    "DecryptionFulfilled(uint256)": TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;
    DecryptionFulfilled: TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;

    "EncryptedAmountDisclosed(bytes32,uint64)": TypedContractEvent<
      EncryptedAmountDisclosedEvent.InputTuple,
      EncryptedAmountDisclosedEvent.OutputTuple,
      EncryptedAmountDisclosedEvent.OutputObject
    >;
    EncryptedAmountDisclosed: TypedContractEvent<
      EncryptedAmountDisclosedEvent.InputTuple,
      EncryptedAmountDisclosedEvent.OutputTuple,
      EncryptedAmountDisclosedEvent.OutputObject
    >;

    "OperatorSet(address,address,uint48)": TypedContractEvent<
      OperatorSetEvent.InputTuple,
      OperatorSetEvent.OutputTuple,
      OperatorSetEvent.OutputObject
    >;
    OperatorSet: TypedContractEvent<
      OperatorSetEvent.InputTuple,
      OperatorSetEvent.OutputTuple,
      OperatorSetEvent.OutputObject
    >;
  };
}
